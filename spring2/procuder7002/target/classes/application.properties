#spring.profiles.active=dev
#========port ======
server.port=7002
#=============redis-session 共享============================
spring.redis.port=6379
spring.redis.timeout=20000
spring.redis.host=127.0.0.1
spring.redis.database=1
spring.session.redis.namespace=spring:session
spring.redis.jedis.pool.max-active=3000
spring.redis.jedis.pool.max-idle=8
spring.redis.lettuce.pool.min-idle=0
spring.redis.lettuce.pool.max-wait=-1
#spring.redis.cluster.nodes=
#spring.redis.password=
#======================spring shiro-redis ============================
#=====================mvc ===============================================
spring.mvc.view.prefix=/WEB-INF/view/
spring.mvc.view.suffix=.jsp
#========================mybatis ==========================================
mybatis.config-location=classpath:mybatis/mybatis.cfg.xml
mybatis.type-aliases-package=serverCloudApi.entitys
mybatis.mapper-locations=classpath:mybatis/mapper/**/*.xml
#Ribbon zuojiqunshi dui wai bao lu de server name can't update
spring.application.name=server-provider-user
#================================mysql info ======================================
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
#spring.datasource.url=jdbc:mysql://192.168.127.139:3306/clouduser2?useUnicode=true&characterEncoding=UTF-8
spring.datasource.url=jdbc:mysql://localhost:3306/clouduser2?useUnicode=true&characterEncoding=UTF-8
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.initialSize=5
# 最大和最小连接池数量
spring.datasource.maxActive=20
spring.datasource.minIdle=5
#获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。
spring.datasource.maxWait=60000
#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
# 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。
spring.datasource.validationQuery=SELECT 1 FROM DUAL
#建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效
spring.datasource.testWhileIdle=true
#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
spring.datasource.testOnBorrow=false
#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
spring.datasource.testOnReturn=false
#是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
spring.datasource.poolPreparedStatements=false
#通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall
spring.datasource.filters=stat, wall
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
# 合并多个DruidDataSource的监控数据
spring.datasource.useGlobalDataSourceStat=true
spring.jpa.show-sql=true
#==================== eureka info ============================
eureka.client.service-url.defaultZone=http://admin:1234@eureka8001:8001/eureka/,http://admin:1234@eureka8002:8002/eureka/,http://admin:1234@eureka8003:8003/eureka/
#eureka server zhong about server name update
eureka.instance.instance-id=server-provider-user3
# fangwen url show ben di ip
eureka.instance.prefer-ip-address=true
info.app.name=atguigu-microservicecloud
info.company.name=www.atguigu.com
info.build.artifactId=$project.artifactId$
info.build.version=$project.version$

#===========================quartz=================================
#spring.quartz.jdbc.schema=classpath:tables_mysql_innodb.sql
#spring.quartz.jdbc.initialize-schema=never

##集群只在存储方式是jobstore才有效
#spring.quartz.job-store-type=jdbc
##同样名字的job在插入到表中会报错，设置为true会覆盖之前相同名字的job
#spring.quartz.overwrite-existing-jobs=true
#spring.quartz.properties.org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX
##配置集群的话，必须实例名一样
#spring.quartz.properties.org.quartz.scheduler.instanceName = MyClusteredScheduler
##根据主机以及时间戳生成实例id
#spring.quartz.properties.org.quartz.scheduler.instanceId = AUTO
#spring.quartz.properties.org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
#spring.quartz.properties.org.quartz.threadPool.threadCount = 5
##mysql使用的驱动代理
#spring.quartz.properties.org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate
#spring.quartz.properties.org.quartz.jobStore.tablePrefix=QRTZ_
##开启集群配置
#spring.quartz.properties.org.quartz.jobStore.isClustered=true
#spring.quartz.properties.org.quartz.plugin.shutdownHook.class=org.quartz.plugins.management.ShutdownHookPlugin
#spring.quartz.properties.org.quartz.plugin.shutdownHook.cleanShutdown=TRUE

##quartz集群数据库  quartz集群中必须使用同一个数据库
#使用自己的数据库配置文件
#spring.quartz.properties.org.quartz.jobStore.useProperties=true
#spring.quartz.properties.org.quartz.jobStore.dataSource=qzDS
#spring.quartz.properties.org.quartz.qzDS.URL=jdbc:mysql://localhost:3306/clouduser?useUnicode=true&characterEncoding=UTF-8
#spring.quartz.properties.org.quartz.qzDS.user=root
#spring.quartz.properties.org.quartz.qzDS.password=root
#spring.quartz.properties.org.quartz.qzDS.driver=com.mysql.jdbc.Driver